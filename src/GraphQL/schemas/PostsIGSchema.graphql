scalar DateTime

type PostIG {
  id: Int!
  page: PageIG!
  created_at: DateTime!
  updated_at: DateTime!
  Page_name: String
  Followers: Int
  Post_text: String
  Usernames: String
  Likes: Int
  Total_NB_commentaires: Int
  len_post: Int
  langue_post: String
  Hashtags: String
  hashtag_count: Int
  Found_Hash: Int
  Day_of_Week: String
  Time_post: DateTime
  Day: Int
  Month: String
  Year: Int
  Date_post: DateTime
  Sentiment_POSTT: String
  sentiment_comment: String
  positive: Int
  negative: Int
  nature: Int
  prediction_label: Int
  prediction_score: Float
  comments: [Comment!]!
}

input CreatePostIGInput {
  page_id: Int!
  Post_text: String
  Usernames: String
  Likes: Int
  Total_NB_commentaires: Int
  len_post: Int
  langue_post: String
  Hashtags: String
  hashtag_count: Int
  Found_Hash: Int
  Day_of_Week: String
  Time_post: DateTime
  Day: Int
  Month: String
  Year: Int
  Date_post: DateTime
  Sentiment_POSTT: String
  sentiment_comment: String
  positive: Int
  negative: Int
  nature: Int
  prediction_label: Int
  prediction_score: Float
  comments: [Comment!]!
}

input UpdatePostIGInput {
  Post_text: String
  Usernames: String
  Likes: Int
  Total_NB_commentaires: Int
  len_post: Int
  langue_post: String
  Hashtags: String
  hashtag_count: Int
  Found_Hash: Int
  Day_of_Week: String
  Time_post: DateTime
  Day: Int
  Month: String
  Year: Int
  Date_post: DateTime
  Sentiment_POSTT: String
  sentiment_comment: String
  positive: Int
  negative: Int
  nature: Int
  prediction_label: Int
  prediction_score: Float
  comments: [Comment!]!
}

type Query {
  getAllPostsIG: [PostIG!]!
  getPostsIGById(id: Int!): PostIG
}

type Mutation {
  createPostIG(data: CreatePostIGInput!): PostIG!
  updatePostIG(id: Int!, data: UpdatePostIGInput!): PostIG!
  deletePostIG(id: Int!): PostIG!
}
